{
  "$id": "https://a11ysupport.io/schema/feature.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "url": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": ["title", "url"]
    },
    "assertion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "strength": {
          "type": "object",
          "properties": {
            "sr": {
              "type": "string",
              "items": {
                "enum": ["MUST", "SHOULD", "MAY", "MUST NOT", "SHOULD NOT", "MAY NOT", "NA"]
              },
              "description": "the RFC 2119 value of requirement level. only 'MUST' assertions will contribute to core support values"
            },
            "vc": {
              "type": "string",
              "items": {
                "enum": ["MUST", "SHOULD", "MAY", "MUST NOT", "SHOULD NOT", "MAY NOT", "NA"]
              },
              "description": "the RFC 2119 value of requirement level. only 'MUST' assertions will contribute to core support values"
            }
          },
          "description": "the RFC 2119 value of requirement level. only 'MUST' assertions will contribute to core support values",
          "required": ["sr", "vc"]
        },
        "pass_strategy": {
          "type": "string",
          "items": {
            "enum": ["any", "all"]
          },
          "description": "The strategy for determining if output rows pass. Defaults to 'any' which means that only one output row needs to pass. 'all' means that all output rows must pass. "
        },
        "preconditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operation_modes": {
          "type": "array",
          "items": {
            "enum": ["sr/reading", "sr/interaction", "vc"]
          }
        },
        "supports_at": {
          "type": "array",
          "items": {
            "enum": ["sr", "vc"]
          }
        },
        "css_target": {
          "type": "string",
          "description": "A css selector that determines which elements in the example need to be tested. This should be a generic selector, and can be overridden by tests that reference this assertion."
        },
        "exclude_at": {
          "type": "object",
          "description": "an object of AT ids as keys and rationale as values. The presence of a key indicates that the AT is not applicable for the given reason. An example might be vc_ios on the convey_role assertion since vc_ios intentionally does not support this."
        },
        "exclude_browsers": {
          "type": "object",
          "description": "an object of browser ids as keys and rationale as values. The presence of a key indicates that the browser is not applicable for the given reason. An example might be that IE does not support an html5 form control."
        }
      },
      "required": ["id", "css_target"]
    }
  },
  "properties": {
    "id": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "description": {
      "type": "string",
      "title": "The Description Schema"
    },
    "related_issues": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/url"
      }
    },
    "keywords": {
      "description": "Key words that are used to help find features in a search",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "keywords_string": {
      "type": "string"
    },
    "recommendation": {
      "type": "string"
    },
    "references": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/url"
      }
    },
    "assertions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/assertion"
      }
    },
    "tests": {
      "type": "array",
      "items": {
        "$ref": "./test.json"
      }
    },
    "date_updated": {
      "type": "string",
      "format": "date"
    }
  },
  "required": [
    "title", "description", "date_updated"
  ]
}

extends layout
include test-case/assertion
include test-procedure.mixin.pug

block content
    div.content-wrapper
        div.content
            h1= 'Test: ' + test.title
            div(class="current-support-container "+test.core_support_string.sr.class)
                p= 'Screen Reader support level: ' + test.core_support_string.sr.string
                    if (test.core_support_string.sr.class === 'na')
                        span  (or no 'MUST' expectations)
            div(class="current-support-container " + test.core_support_string.vc.class)
                p= 'Voice Control support level: ' + test.core_support_string.vc.string
                    if (test.core_support_string.vc.class === 'na')
                        span  (or no 'MUST' expectations)

            h2(id="top") On this page
            ul.link-list
                li
                    a(href="#description") About this test
                li
                    a(href="#age-of-results") Age of results
                li
                    a(href="#test-html") Test HTML
                if test.assertions
                    li
                        a(href="#versions") Dates and Versions of tested combinations
                    li
                        a(href="#support-summary-by-at-sr") Summary of screen reader support by expectation
                    li
                        a(href="#support-summary-by-at-vc") Summary of voice control support by expectation
                    li
                        a(href="#support-tables") Detailed support tables
                li
                    a(href="#history") History
                li
                    a(href="#related-features") Related features
                li
                    a(href="#contribute") Contribute and Feedback

            h2(id='description') About this test
            div!= md.render(test.description)

            a(href="/tests/" + testHelper.makeSafe(test.id) + "/run") Run this test and submit your results

            h2(id='age-of-results') Age of results
            p Results in this test range from #{moment(test.all_dates.max).fromNow()} to #{moment(test.all_dates.min).fromNow()}. See <a href="#versions">detailed information about test dates and versions</a> for more information.
            if (test.failing_dates.max && moment().diff(test.failing_dates.max, 'months') >= 9)
                div.caution
                    h3 Caution
                    p Failing or partial results may be out of date. The oldest result is from #{moment(test.failing_dates.min).fromNow()}. Consider <a href="#{"/tests/" + testHelper.makeSafe(test.id) + "/run"}">running this test</a> and contributing results.
            else if (test.failing_dates.max)
                p Failing and partial results are between #{moment(test.failing_dates.min).fromNow()} and #{moment(test.failing_dates.min).fromNow()}.

            h2(id="test-html") Test HTML
            if (test.html_file.startsWith('http'))
                a(href=test.html_file) view the external test
            else if (testHTML && testHTML.split(/\r\n|\r|\n/).length < 30)
                a(href="/tests/html/" + test.html_file) open the test page
                pre.test-html
                    code= testHTML
            else
                a(href="/tests/html/" + test.html_file) open the test page
                p HTML source is too long to display here.

            if test.assertions

                each at_type in [{type: 'sr', title: 'Screen Reader'}, {type: 'vc', title: 'Voice Control'}]
                    details(open)
                        summary
                            h2(id="support-summary-by-at-"+at_type.type) Summary of #{at_type.title} support by expectation
                        - var some_support_behind_settings = false;
                        - var colspan = 0;

                        div.responsive-table(tabindex="0")
                            each feature, currentFeatureIndex in testMap[test.id]
                                - var assertions_found = 0;
                                table(aria-labelledby="support-summary-by-at-"+at_type.type+" "+at_type.type+"-feature-index-"+currentFeatureIndex).support-table.assertion-container.summary-matrix
                                    caption(id=at_type.type+"-feature-index-"+currentFeatureIndex) #{feature.title}
                                    tr
                                        th(id="h-feature-"+currentFeatureIndex+"-at-type-"+at_type.type+"-expectation" rowspan="2") Expectation
                                        each at in ATBrowsers.core_at
                                            if ATBrowsers.at[at].type !== at_type.type
                                                - continue
                                            th(id="h-feature-"+currentFeatureIndex+"-at-"+at colspan=ATBrowsers.at[at].core_browsers.length) #{ATBrowsers.at[at].title}
                                    tr
                                        each at in ATBrowsers.core_at
                                            if ATBrowsers.at[at].type !== at_type.type
                                                - continue
                                            each browser in ATBrowsers.at[at].core_browsers
                                                th(id="h-feature-"+currentFeatureIndex+"-at-" + at + "-browser-" + browser) #{ATBrowsers.browsers[browser].title}
                                                - colspan++;
                                    each assertion, assertionIndex in test.assertions
                                        if assertion.assertion_strength[at_type.type] === "NA"
                                            - continue
                                        if (feature.featureId === assertion.feature_id)
                                            tr
                                                th(id="h-feature-"+currentFeatureIndex+"-"+at_type.type+"-assertion-"+assertionIndex headers="h-feature-"+currentFeatureIndex+"-at-type-"+at_type.type+"-expectation").assertion
                                                    a(href="#assertion-" + assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id + '-' + (assertion.applied_to ? assertion.applied_to.toString().replace('/', '-') : '') + (assertion.references ? assertion.references.join('-').replace('/', '-') : ''))
                                                        span #{assertion.assertion_strength[at_type.type]} #{testHelper.trimTechFromAssertion(assertion.assertion_title)}
                                                        if (assertion.applied_to)
                                                            span.applied_to  applied to: #{assertion.applied_to_title}
                                                                if (assertion.references && assertion.references.length)
                                                                    span ; references: #{assertion.references_titles}
                                                each at_id in ATBrowsers.core_at
                                                    if ATBrowsers.at[at_id].type !== at_type.type
                                                        - continue
                                                    - assertions_found++
                                                    each browser in ATBrowsers.at[at_id].core_browsers
                                                        td(class="support-case " + assertion.core_support_by_at_browser[at_id][browser].string.class headers="h-feature-"+currentFeatureIndex+"-"+at_type.type+"-assertion-"+assertionIndex+" h-feature-"+currentFeatureIndex+"-at-"+at_id+" h-feature-"+currentFeatureIndex+"-at-" + at_id + "-browser-" + browser)
                                                            a(href="#assertion-"+assertion.feature_id.replace('/', '-')+"-"+assertion.feature_assertion_id+ '-' + (assertion.applied_to ? assertion.applied_to.toString().replace('/', '-') : '') + (assertion.references ? assertion.references.join('-').replace('/', '-') : '')+"-"+at_id+"-"+browser)
                                                                span #{assertion.core_support_by_at_browser[at_id][browser].string.string}
                                                                if (assertion.core_support_by_at_browser[at_id][browser].some_support_behind_settings)
                                                                    - some_support_behind_settings = true;
                                                                    span *
                                    if assertions_found === 0
                                        tr
                                            td(colspan=colspan + 1) Not applicable
                        p * means that some support is hidden behind settings

            h2(id="detailed-results") Detailed support results by expectation
            each assertion in test.assertions
                div.assertion-container
                    h3(id="assertion-"+assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id+ '-' + (assertion.applied_to ? assertion.applied_to.toString().replace('/', '-') : '')) Expectation for the #{assertion.feature_title}: #{assertion.assertion_title}
                        if (assertion.applied_to)
                            span  - applied to the #{assertion.applied_to_title}
                        if (assertion.references && assertion.references.length)
                            span  - applied to the #{assertion.references_titles}

                    if (assertion.applied_to)
                        p  This expectation is applied to the #{assertion.applied_to_title}. Expectations and results might differ when the the feature is applied to different roles.

                    if (assertion.references && assertion.references.length)
                        p  This expectation references the #{assertion.references_titles}. Expectations and results might differ when the the feature references different roles.

                    p This expectation is from the #[a(href="/tech/"+assertion.feature_id) #{assertion.feature_title} feature].

                    if (assertion.assertion_rationale)
                        h4 Rationale:
                        p #{assertion.assertion_rationale}

                    h4 Strength of this expectation for different types of assistive technologies:
                    ul
                        li Screen Readers: #{assertion.assertion_strength.sr}
                        li Voice Control: #{assertion.assertion_strength.vc}

                    if (assertion.assertion_examples)
                        h4 Examples:
                        ul
                            for example in assertion.assertion_examples
                                li #{example}

                    h4 Grading method:
                    if (assertion.pass_strategy === 'all')
                        p All of the listed commands must pass for the expectation to pass.
                    else
                        p Just one of the listed commands must pass for the expectation to pass.

                    if (assertion.assertion_notes)
                        h4 Notes:
                        p !{md.renderInline(assertion.assertion_notes)}

                    div.responsive-table(tabindex="0")
                        table(aria-labelledby="assertion-"+assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id + '-' + (assertion.applied_to ? assertion.applied_to.toString().replace('/', '-') : '') + (assertion.references ? assertion.references.join('').replace('/', '-') : ''))
                            tr
                                th AT
                                th Browser
                                th Has Support
                                th Output
                            each at in ATBrowsers.core_at
                                each browser in ATBrowsers.at[at].core_browsers
                                    tr(id="assertion-"+assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id+ '-' + (assertion.applied_to ? assertion.applied_to.toString().replace('/', '-') : '') + (assertion.references ? assertion.references.join('-').replace('/', '-') : '')+"-"+at+"-"+browser)
                                        td= ATBrowsers.at[at].title
                                        td= ATBrowsers.browsers[browser].title
                                        td(class='support-case ' + assertion.results[at].browsers[browser].support)
                                            a(href="/tests/" + testHelper.makeSafe(test.id) + "/" + testHelper.makeSafe(assertion.feature_id) + "/" + assertion.feature_assertion_id + "/" + at + "/" + browser)
                                                span #{assertion.results[at].browsers[browser].support_string.string}
                                        td
                                            if (assertion.results[at].browsers[browser].output)
                                                ul
                                                    each output in assertion.results[at].browsers[browser].output
                                                        li
                                                            strong= "Result: "
                                                            span(class="output-result "+output.result)= " (" + output.result + ")"
                                                            ul
                                                                li
                                                                    details
                                                                        summary Test Case: #{testHelper.generateTestTitle(output, ATBrowsers.at[at])}
                                                                        +test-procedure(output, ATBrowsers.at[at], ATBrowsers.browsers[browser], ATBrowsers, test)
                                                                li
                                                                    strong Output:
                                                                    span= " " + output.output
                                                                if (output.behind_setting)
                                                                    li
                                                                        strong Must change default settings to enable support:
                                                                        span= " " + output.behind_setting
                                                                if (output.commandNotes)
                                                                    li
                                                                        strong Command Notes:
                                                                        span= " " + output.commandNotes
                                                                if (output.resultNotes)
                                                                    li
                                                                        strong Result Notes:
                                                                        span= " " + output.resultNotes

                                                if (assertion.results[at].browsers[browser].notes && assertion.results[at].browsers[browser].notes)
                                                    strong Notes:
                                                    span= " " + assertion.results[at].browsers[browser].notes
                                            else
                                                if (assertion.results[at].browsers[browser].notes && assertion.results[at].browsers[browser].notes)
                                                    strong Notes:
                                                    span= " " + assertion.results[at].browsers[browser].notes
                                                else
                                                    span -

                    details.indent
                        summary
                            h4 Extended Support for: #{assertion.feature_title}: #{assertion.assertion_title}

                        p These are less common combinations
                        div.responsive-table(tabindex="0")
                            table
                                tr
                                    th AT
                                    th Browser
                                    th Has Support
                                    th Output
                                each at in ATBrowsers.at
                                    - var browsers = at.extended_browsers
                                    if ATBrowsers.extended_at.includes(at.id)
                                        - var browsers = browsers.concat(at.core_browsers)
                                    each browser in browsers
                                        tr
                                            td= at.title
                                                if test.versions[at.id] && test.versions[at.id].browsers[browser] && test.versions[at.id].browsers[browser].at_version
                                                    span= ' ' + test.versions[at.id].browsers[browser].at_version
                                            td= ATBrowsers.browsers[browser].title
                                                if test.versions[at.id] && test.versions[at.id].browsers[browser] && test.versions[at.id].browsers[browser].browser_version
                                                    span= ' ' + test.versions[at.id].browsers[browser].browser_version
                                            td(class='support-case ' + assertion.results[at.id].browsers[browser].support)
                                                a(href="/tests/" + testHelper.makeSafe(test.id) + "/" + testHelper.makeSafe(assertion.feature_id) + "/" + assertion.feature_assertion_id + "/" + at.id + "/" + browser)
                                                    span #{assertion.results[at.id].browsers[browser].support_string.string}
                                            td
                                                if (assertion.results[at.id].browsers[browser].output)
                                                    ul
                                                        each output in assertion.results[at.id].browsers[browser].output
                                                            li
                                                                strong Result:
                                                                span= " (" + output.result + ")"
                                                                ul
                                                                    li
                                                                        details
                                                                            summary Test Case: #{testHelper.generateTestTitle(output, ATBrowsers.at[at.id])}
                                                                            +test-procedure(output, ATBrowsers.at[at.id], ATBrowsers.browsers[browser], ATBrowsers, test)
                                                                    li
                                                                        strong Output:
                                                                        span= " " + output.output
                                                                    if (output.behind_setting)
                                                                        li
                                                                            strong Must change default settings to enable support:
                                                                            span= " " + output.behind_setting
                                                                    if (output.commandNotes)
                                                                        li
                                                                            strong Command Notes:
                                                                            span= " " + output.commandNotes
                                                                    if (output.resultNotes)
                                                                        li
                                                                            strong Result Notes:
                                                                            span= " " + output.resultNotes
                                                else
                                                    span -
                    a(href="#top").back-to-top Back to top

            details(open)
                summary
                    h2(id="versions") Dates and Versions of tested combinations
                div.responsive-table(tabindex="0")
                    table
                        tr
                            th AT
                            th AT Version
                            th Browser
                            th Browser version
                            th OS version
                            th Date tested
                        each at in ATBrowsers.core_at
                            each browser in ATBrowsers.at[at].core_browsers
                                if (test.versions[at] && test.versions[at].browsers[browser])
                                    tr
                                        td #{ATBrowsers.at[at].title}
                                        td #{test.versions[at].browsers[browser].at_version}
                                        td #{ATBrowsers.browsers[browser].title}
                                        td #{test.versions[at].browsers[browser].browser_version}
                                        td #{test.versions[at].browsers[browser].os_version}
                                        td #{test.versions[at].browsers[browser].date}

            h2(id="history") History
            ul
                each record in test.history
                    li
                        strong= record.date + ' '
                        span!= md.renderInline(record.message)

        div.sidebar
            h2(id="related-features") Related Features
            p This test is found in the following features:
            ul
                each featureInfo in features
                    li
                        a(href="/tech/" + featureInfo.featureId) #{featureInfo.title}

            h2(id="contribute") Feedback and Contribute
            p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.

            ul
                li
                    a(href='https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title='+test.id+'&labels=test%20case') There is a problem with this test case (the test file, procedure, expected results, etc)
                li
                    p Use the support tables to view details and report issues or changes.

            h2 Other
            p
                a(href="/faq#what-are-expectations%3F") What are expectations and how are they determined?

    script(src="/js/feature-test.js")
